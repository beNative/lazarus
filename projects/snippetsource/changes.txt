SnippetSource lets you organise your favorite pieces of code, scripts, thoughts,
notes or other documents in a user definable tree structure.

Tips and tricks, solutions to problems you encounter and references can be
organised as you like.

You can accompany your node with formatted text in RTF format, which will be
stored together with the node. It also supports embedded images that you can
drag and drop into the richtext editor.

This will create a copy of each document and will duplicate the underlying
folder structure as wel.

Nodes can be moved freely by dragging them to another folder.

It uses the text editor module which was developed for my Notepas project, which
is in turn based on the SynEdit components used by Lazarus for its source code
editor.
This has the convenient side effect that the capabillities of the text editor
will increase as Lazarus evolves.

Since version 3 the possibility to execute script code was added. Snippets that
represent script code can directly be executed.

My intention is to keep the user interface as clean and fast as possible so
users can focus more on the content rather than confront them with an
overwhelming and bloated user interface.

This project uses my LogViewer application for runtime logging.

Images can be dragged and dropped into both the treeviewer and the Richeditor.

IDEAS:
- support for multiple databases as tabbed views
- drag and drop of nodes between seperate instances of snippetsource
- paste snippet into Notepas/DataGrabber using IPC
--
import from older version?

insert into Snippet (
  Id,
  HighlighterId,
  NodeTypeId,
  ParentId,
  ImageIndex,
  NodeName,
  Text,
  Comment,
  CommentRtf
)
select
  Id,
  HighlighterId,
  NodeTypeId,
  ParentId,
  ImageIndex,
  NodeName,
  Text,
  Comment,
  CommentRtf
from
  otherdb.Snippet

TODO (14/05/2021)
- Duplicate node
- Drag and drop of RTF documents
- Custom node sequence number (up/down position)
- More polished look for lookup form
- Bookmark positions or favourites which can be selected immediately
- Most recently changed nodes?
- Most visited nodes?
- Read only mode (with multiple editor buffer views side by side)
- Operations on multiselection of nodes
- Backup/restore option (7z)
- ImageIndex is now a reference to the internal imagelist rather than a
  reference to a record in the Glyph table.
- Customize the node images from a user definable set of glyphs which can be
  stored in the snippet database.

16/05/2021
- Version 3.5

15/05/2021
- Set focus to snippet title when adding a new node.
- Show Stderr output in red in the console viewer.
- Fixed some issues in ts.RichEditor.View.KMemo

14/05/2021
- Disabled incremental search in treeview as it can result in unwanted focus
  changes.
- Lookup dialog improvements.

12/05/2021
- Fixed possible dataset exception when posting changes to node names.
- Disabled history feature as it causes problems when adding nodes.

27/03/2021
- Version 3.4
- Added new table History

10/02/2021
- Version 3.3
- Added extra setting to enable/disable log messages for LogViewer.
- SQLite updated to release 3.34.1

16/01/2021
- Version 3.2
- Added support for dragging and dropping URL's into the rich-text editor. This
  does work with Chrome and Edge and Firefox. If you cannot drag and drop links
  from Firefox, you can fix this by starting the application as follows with the
  '-no-deelevate' parameter: firefox.exe -no-deelevate

13/01/2021
- Version 3.1
- Cleanup settings dialog
- Added missing highlighters in Highlighter table.
- Simple database backup function added to settings dialog.
- Added experimental query dialog (SHIFT+CTRL+Q), that can be used get direct
  access to the SQLite database using SQL statements.

06/01/2021
- Do not loose position in tree after refresh.
- Store last size + position.

30/12/2020
- Image files (all types supported by TPicture) can be dragged and dropped into
  the treeviewer and the rich editor. Image file types other than png and jpg
  are automatically converted to jpg.
- Added settings to automatically hide text and rich-text editors based on node
  content.
- Delayed loading of RTF data makes the application more responsive now.

24/12/2020
- FPC 3.2 and Lazarus 2.0.10
- Support for drag and drop of image files.

10/06/2020
- Added initial support for executing Python scripts

28/04/2020
- FPC 3.0.4 and Lazarus 2.0.2 (latest stable release)

15/01/2020

27/02/2019
- Pasing copied images works now in RTF-editor view.
- Fixed bug: paragraph style changes were not dispatched.

19/01/2019
- Fixed bug: changes were not always detected in RTF text editor.
- Updated all used libraries and controls.

24/03/2018
- Fixed loading and saving of RichText content to/from stream.

21/03/2018
- Fix: resolved path issue with determination of database file location
- Updated database creation script
- Lookup dialog

31/01/2018
- RichMemo has been replaced by TKMemo which has more features while remaining
  cross platform capable.

24/01/2018
- FPC 3.1.1 and Lazarus 1.9 (trunk sources, revision 57103)

15/10/2017
- Refactored the datamodule with the data access components.
- SQLite (v.3.20.1) supports now varchar fields and these are now used for small
  text fields instead of the TEXT type, which translates to ftMemo in the
  sqldb components which prevents them to be used as lookup fields.

01/10/2017
- Updated dependencies (using the new package manager as much as possible)
- FPC 3.1.1 and Lazarus 1.9

11/06/2017
- FPC 3.0.2 and Lazarus 1.9

07/01/2017
- Fix: switching to another highlighter was not always saved
- Fix: edit mode not activated when editing snippet title

22/12/2016
- Fixed RichEditor issues
- Added support for background colors to RichEditor

03/12/2016
- Renamed units to dotted namespace-like notation

29/10/2016
- Updated code to support FPC 3.0.0, which makes it more compatible to recent
  Delphi versions.

12/10/2016
- Seems to work fine on Lazarus 1.6.

1/04/2015
- Updated sources to support latest tslib sources

14/12/2014
- Refactored sources in ts.Components.VirtualDBTreeEx
- Added DB creation script (snippetsource.sql) to the project sources.
- Fixed bug in showing tree node images.
- Cleanup of unneeded dependencies.
- Using now the Lazarus stock DB components to connect to the database.

